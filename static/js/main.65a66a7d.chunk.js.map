{"version":3,"sources":["Chat/Message/Message.tsx","Chat/Chat.tsx","MessageInput/MessageInput.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","paper","padding","message","color","timelineOppositeContent","flex","display","MessageO","username","hour","Date","sent","read","this","Message","classes","TimelineItem","TimelineOppositeContent","className","TimelineSeparator","TimelineDot","Avatar","slice","toUpperCase","TimelineConnector","TimelineContent","Paper","elevation","Typography","variant","component","toLocaleDateString","toLocaleTimeString","minute","Divider","Chat","messages","messagesEndRef","useRef","useEffect","current","scrollIntoView","behavior","scrollToBottom","style","height","overflowY","margin","Timeline","align","map","Math","random","ref","textField","width","iconButton","border","marginLeft","MessageInput","sendMessage","useState","handleChange","alignItems","TextField","id","label","multiline","rowsMax","value","onChange","event","target","IconButton","onClick","App","addMessage","Container","maxWidth","console","log","oldMessages","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65a66a7d.chunk.js","sourcesContent":["import TimelineItem from \"@material-ui/lab/TimelineItem\";\nimport TimelineSeparator from \"@material-ui/lab/TimelineSeparator\";\nimport TimelineConnector from \"@material-ui/lab/TimelineConnector\";\nimport TimelineContent from \"@material-ui/lab/TimelineContent\";\nimport TimelineOppositeContent from \"@material-ui/lab/TimelineOppositeContent\";\nimport TimelineDot from \"@material-ui/lab/TimelineDot\";\nimport FastfoodIcon from \"@material-ui/icons/Fastfood\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Avatar, Divider } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: \"6px 16px\"\n  },\n  message: {\n    color: 'green'\n  },\n  timelineOppositeContent: {\n    flex: 0,\n    display: 'none'\n  }\n}));\n\nexport interface MessageO {\n  username: string;\n  hour: Date;\n  message: string;\n  sent: boolean;\n  read: boolean;\n}\n\nexport class MessageO {\n  username: string = \"\";\n  hour: Date = new Date()\n  message: string = \"\";\n  sent: boolean = false;\n  read: boolean = false;\n\n  constructor(username: string, message: string) {\n    this.username = username;\n    this.message = message;\n  }\n}\n\nexport default function Message({ username, hour, message, sent, read }: MessageO) {\n  const classes = useStyles();\n  const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n  return (\n    <TimelineItem>\n      <TimelineOppositeContent className={classes.timelineOppositeContent}>\n      </TimelineOppositeContent>\n      <TimelineSeparator>\n        <TimelineDot>\n          <Avatar>{username.slice(0, 2).toUpperCase()}</Avatar>\n        </TimelineDot>\n        <TimelineConnector />\n      </TimelineSeparator>\n      <TimelineContent>\n        <Paper elevation={3} className={classes.paper}>\n          <Typography variant=\"subtitle1\" component=\"p\">\n            {username}\n          </Typography>\n          <Typography variant=\"body2\">\n            {`${hour.toLocaleDateString('es-ES')} - ${hour.toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' })}`}\n          </Typography>\n          <Divider />\n          <Typography>{message}</Typography>\n        </Paper>\n      </TimelineContent>\n    </TimelineItem>\n  )\n}\n","import Timeline from \"@material-ui/lab/Timeline\";\nimport { useEffect, useRef } from \"react\";\nimport Message, { MessageO } from \"./Message/Message\";\n\ninterface IChatProps {\n  messages: MessageO[]\n}\n\nexport default function Chat({ messages }: IChatProps) {\n\n  const messagesEndRef = useRef<HTMLDivElement>(null)\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })\n  }\n\n  useEffect(() => {\n    scrollToBottom()\n  }, [messages]);\n\n  return (\n    <div style={{ height: '90vh', overflowY: 'scroll', padding: 0, margin: 0 }}>\n      <Timeline align=\"left\">\n        {messages.map(message =>\n          <Message\n            key={Math.random()}\n            hour={message.hour}\n            message={message.message}\n            read={message.read}\n            sent={message.sent}\n            username={message.username}\n          />)}\n      </Timeline>\n      <div ref={messagesEndRef} />\n    </div >\n  )\n}\n","import React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField'\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport IconButton from '@material-ui/core/IconButton';\nimport Send from '@material-ui/icons/Send'\n\ninterface IMessageInputProps {\n  sendMessage(message: string): void\n}\n\nconst useStyles = makeStyles((theme) => ({\n  textField: {\n    width: '100%',\n  },\n  iconButton: {\n    border: '6px solid rgba(0,0,0,0.5)',\n    width: '50px',\n    height: '50px',\n    marginLeft: '10px'\n  }\n}));\n\nexport default function MessageInput({ sendMessage }: IMessageInputProps) {\n  const classes = useStyles();\n\n  const [textField, handleChange] = useState('')\n\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    handleChange(event.target.value)\n  }\n\n  return (\n    <div style={{ padding: '10px 20px', display: 'flex', alignItems: 'center' }}>\n      <TextField\n        className={classes.textField}\n        id=\"outlined-multiline-flexible\"\n        label=\"Multiline\"\n        multiline\n        rowsMax={4}\n        value={textField}\n        onChange={onChange}\n        variant=\"outlined\"\n      />\n      <IconButton className={classes.iconButton} onClick={() => {sendMessage(textField); handleChange('')}}><Send /></IconButton>\n    </div>\n  )\n}\n","import './App.css';\nimport Chat from './Chat/Chat';\nimport MessageInput from './MessageInput/MessageInput';\nimport Container from '@material-ui/core/Container';\n// import { makeStyles } from \"@material-ui/core/styles\";\nimport { MessageO } from './Chat/Message/Message';\nimport { useState } from 'react';\n\n// const useStyles = makeStyles((theme) => ({\n//   messageInput: {\n//     bottom: '1px'\n//   }\n// }));\nfunction App() {\n  // const classes = useStyles();\n  const [messages, addMessage] = useState<MessageO[]>([new MessageO('Salva', 'This is a message')])\n  // const messages: MessageO[] = [new MessageO('Salva', 'This is a message')]\n\n  const sendMessage = (message: string): void => {\n    console.log(message)\n    if (message) {\n      addMessage(oldMessages => [...oldMessages, new MessageO('Pepe', message)])\n    }\n  }\n\n  return (\n    <Container maxWidth=\"xl\">\n      <Chat messages={messages} />\n      <MessageInput sendMessage={sendMessage} />\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}